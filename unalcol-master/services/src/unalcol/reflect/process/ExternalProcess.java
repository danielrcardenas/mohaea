package unalcol.reflect.process;
import java.io.*;

//
//Unalcol Service structure Pack 1.0 by Jonatan Gomez-Perdomo
//https://github.com/jgomezpe/unalcol/tree/master/services/
//
/**
*
* ExternalProcess  
* <p>A Class for Executing External Process (commands).</p>
*
* <P>
* <A HREF="https://github.com/jgomezpe/unalcol/blob/master/services/src/unalcol/reflect/process/ExternalProcess.java" target="_blank">
* Source code </A> is available.
*
* <h3>License</h3>
*
* Copyright (c) 2014 by Jonatan Gomez-Perdomo. <br>
* All rights reserved. <br>
*
* <p>Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* <ul>
* <li> Redistributions of source code must retain the above copyright notice,
* this list of conditions and the following disclaimer.
* <li> Redistributions in binary form must reproduce the above copyright notice,
* this list of conditions and the following disclaimer in the documentation
* and/or other materials provided with the distribution.
* <li> Neither the name of the copyright owners, their employers, nor the
* names of its contributors may be used to endorse or promote products
* derived from this software without specific prior written permission.
* </ul>
* <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNERS OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*
*
*
* @author <A HREF="http://disi.unal.edu.co/profesores/jgomezpe"> Jonatan Gomez-Perdomo </A>
* (E-mail: <A HREF="mailto:jgomezpe@unal.edu.co">jgomezpe@unal.edu.co</A> )
* @version 1.0
*/
public class ExternalProcess implements Runnable{
	/**
	 * The external process (including arguments) to be executed
	 */
	protected String[] command;
	/**
	 * The external process (including arguments) to be executed
	 */
	protected String commandLine = null;
	/**
	 * Java Process executing the command
	 */
	protected Process process;
	/**
	 * Flag that indicates if the process is running or not
	 */
	protected boolean is_running = false;
	/**
	 * External process status, returned by the os
	 */
	protected int status;
	/**
	 * Stream used for reporting the error messages generated by the external process
	 */
	protected PrintStream err = null;
	/**
	 * Stream used for reporting the output messages generated by the external process
	 */
	protected PrintStream out = null;

	/**
	 * Created a External Process representing the command sent as parameter
	 * @param command The external process (including arguments) to be executed
	 */
	public ExternalProcess( String[] command ){ this.command = command; }

	/**
	 * Created a External Process representing the command sent as parameter
	 * @param commandLine The external process (including arguments) to be executed
	 */
	public ExternalProcess( String commandLine ){ this.commandLine = commandLine; }

	/**
	 * Creates a External Process representing the command sent as parameter
	 * @param commandLine The external process (including arguments) to be executed
	 * @param out Stream used for reporting the output messages generated by the exteernal process
	 * @param err Stream used for reporting the error messages generated by the exteernal process
	 */
	public ExternalProcess( String commandLine, PrintStream out, PrintStream err ){
		this.commandLine = commandLine;
		this.err = err;
		this.out = out;
	}

	/**
	 * Creates a External Process representing the command sent as parameter
	 * @param command The external process (including arguments) to be executed
	 * @param out Stream used for reporting the output messages generated by the external process
	 * @param err Stream used for reporting the error messages generated by the external process
	 */
	public ExternalProcess( String[] command, PrintStream out, PrintStream err ){
		this.command = command;
		this.err = err;
		this.out = out;
	}

	/**
	 * Executes the external process
	 */
	@Override
	public void run(){
		try{
			if( commandLine == null ) process = Runtime.getRuntime().exec(command);
			else process = Runtime.getRuntime().exec(commandLine);
			is_running = true;
			ProcessInputStream input = new ProcessInputStream(process.getInputStream(), this, out);
			ProcessInputStream error = new ProcessInputStream(process.getErrorStream(), this, err);
			input.start();
			error.start();
			status = process.waitFor();
			is_running = false;
		}catch( Exception e ){
			if( err != null ){
				PrintStream temp = System.err;
				System.setErr(err);
				e.printStackTrace();
				System.setErr(temp);
			}
			status = Integer.MAX_VALUE;
		}
	}

	/**
	 * Gets the process status
	 * @return The external process status that is returned by the os
	 */
	public int status(){ return status; }

	/**
	 * Executes the external process sent as parameter
	 * @param command The external process (including arguments) to be executed
	 * @return <i>true</i> if the command was executed without errors, <i>false</i> otherwise
	 */
	public static boolean run( String[] command ){
		ExternalProcess p = new ExternalProcess(command);
		p.run();
		return (p.status()==0);
	}

	/**
	 * Executes the external process sent as parameter
	 * @param command The external process (including arguments) to be executed
	 * @param out Stream used for reporting the output messages generated by the exteernal process
	 * @param err Stream used for reporting the error messages generated by the exteernal process
	 * @return <i>true</i> if the command was executed without errors, <i>false</i> otherwise
	 */
	public static boolean run( String[] command, PrintStream out, PrintStream err ){
		ExternalProcess p = new ExternalProcess(command, out, err);
		p.run();
		return (p.status()==0);
	}
    
	/**
	 * Executes the external process sent as parameter
	 * @param command The external process (including arguments) to be executed
	 * @param out Stream used for reporting the output messages generated by the exteernal process
	 * @param err Stream used for reporting the error messages generated by the exteernal process
	 * @return <i>true</i> if the command was executed without errors, <i>false</i> otherwise
	 */
	public static boolean run( String command, PrintStream out, PrintStream err ){
		ExternalProcess p = new ExternalProcess(command, out, err);
		p.run();
		return (p.status()==0);
	}    
}